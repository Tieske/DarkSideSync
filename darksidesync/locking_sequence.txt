proper luastate shutdown;
=========================
will go through garbage collect at luastate shutdown

- utility list is stored in library static data
- data queue is stored in globaldata per luastate

get globaldata from lua registry
lock
set status to stopping   >> any utils will now get errors
unlock  >> allow any waiting utils to actually get the error
unregister all utilities for this luastate (might require lock/unlock actions)
  --> there is no async access because access to globaldata is through utilrecord
      which were all just removed
lock
dispose of mutexes and sockets in globaldata
remove references from registry to API and globaldata
done!

proper overall shutdown;
========================
when networkcount reaches 0, the static data must be disposed of
lock
clear everything
unlock
destroy lock     --> the last two lines are not safe, another thread might claim the 


Accessing the global state data;
===============================
When accessing it from a Lua callable function (anything with a lua_state 
parameter), then no locks will necessary when acquiring the global record because
it will only be created or destroyed from a Lua thread, and those are single 
threaded by nature. NOTE: this applies only to collecting the record! NOT to
modifying/reading it. Lock the global structure through its own lock before 
reading/writing, and unlock when done.

When accessing the global data structure from a background worker, first lock
the utillock mutex before accessing the utillist.
Verify the utilid, then collect the global record. Lock the record using its
own lock, only then release the utillock. Do the reading/writing and unlock 
when done.

Lua registry globals;
====================
Registry
 |
 +- [DSS_REGISTRY_NAME]		(table)			Table with DSS api structs
 |   +- [DSS_VERSION_KEY]	(string)		DSS version
 |   +- [DSS_API_1v0_KEY]	(lightuserdata)	Pointer (type: pDSS_api_1v0_t) to api struct
 +- [DSS_GLOBALS_KEY]		(userdata)		Global DSS data per LuaState
 +- [DSS_GLOBALS_MT]		(table)			Metatable with __gc() for userdata cleanup
